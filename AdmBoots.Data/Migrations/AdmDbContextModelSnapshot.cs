// <auto-generated />
using System;
using AdmBoots.Data.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AdmBoots.Data.Migrations
{
    [DbContext(typeof(AdmDbContext))]
    partial class AdmDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("AdmBoots.Domain.Models.AuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4");

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4");

                    b.Property<string>("ClientName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4");

                    b.Property<string>("CustomData")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000) CHARACTER SET utf8mb4");

                    b.Property<string>("Exception")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000) CHARACTER SET utf8mb4");

                    b.Property<int>("ExecutionDuration")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExecutionTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("MethodName")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4");

                    b.Property<string>("Parameters")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000) CHARACTER SET utf8mb4");

                    b.Property<string>("ReturnValue")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000) CHARACTER SET utf8mb4");

                    b.Property<string>("ServiceName")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("AuditLog");
                });

            modelBuilder.Entity("AdmBoots.Domain.Models.JobLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("BeginTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ErrorMsg")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("JobName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4");

                    b.Property<string>("Level")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Result")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("Seconds")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.ToTable("JobLog");
                });

            modelBuilder.Entity("AdmBoots.Domain.Models.MailSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Cc")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000) CHARACTER SET utf8mb4");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4");

                    b.Property<string>("Fr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4");

                    b.Property<string>("FrHost")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4");

                    b.Property<bool>("Notify")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("To")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("MailSetting");
                });

            modelBuilder.Entity("AdmBoots.Domain.Models.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<string>("CreatorName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4");

                    b.Property<string>("Icon")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MenuType")
                        .HasColumnType("int");

                    b.Property<int?>("ModifierId")
                        .HasColumnType("int");

                    b.Property<string>("ModifierName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("ModifyTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("Sort")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("menu");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "yibp",
                            CreateTime = new DateTime(2020, 12, 1, 15, 15, 51, 797, DateTimeKind.Local).AddTicks(9309),
                            CreatorId = 1,
                            CreatorName = "管理员",
                            Description = "菜单的Uri为路由地址",
                            Icon = "AreaChartOutlined",
                            IsActive = true,
                            MenuType = 1,
                            Name = "仪表盘",
                            ParentId = -1,
                            Sort = 0,
                            Status = 1,
                            Uri = "/dashboard"
                        },
                        new
                        {
                            Id = 2,
                            Code = "xitgl",
                            CreateTime = new DateTime(2020, 12, 1, 15, 15, 51, 797, DateTimeKind.Local).AddTicks(9406),
                            CreatorId = 1,
                            CreatorName = "管理员",
                            Description = "菜单的Uri为路由地址",
                            Icon = "ClusterOutlined",
                            IsActive = true,
                            MenuType = 1,
                            Name = "系统管理",
                            ParentId = -1,
                            Sort = 1,
                            Status = 1,
                            Uri = "/system"
                        },
                        new
                        {
                            Id = 3,
                            Code = "zuoydd",
                            CreateTime = new DateTime(2020, 12, 1, 15, 15, 51, 797, DateTimeKind.Local).AddTicks(9412),
                            CreatorId = 1,
                            CreatorName = "管理员",
                            Description = "菜单的Uri为路由地址",
                            Icon = "ScheduleOutlined",
                            IsActive = true,
                            MenuType = 1,
                            Name = "任务调度",
                            ParentId = -1,
                            Sort = 2,
                            Status = 1,
                            Uri = "/schedule"
                        },
                        new
                        {
                            Id = 4,
                            Code = "juesgl",
                            CreateTime = new DateTime(2020, 12, 1, 15, 15, 51, 797, DateTimeKind.Local).AddTicks(9417),
                            CreatorId = 1,
                            CreatorName = "管理员",
                            Description = "菜单的Uri为路由地址",
                            Icon = "ClusterOutlined",
                            IsActive = true,
                            MenuType = 1,
                            Name = "角色管理",
                            ParentId = 2,
                            Sort = 1,
                            Status = 1,
                            Uri = "/role"
                        },
                        new
                        {
                            Id = 5,
                            Code = "caidgl",
                            CreateTime = new DateTime(2020, 12, 1, 15, 15, 51, 797, DateTimeKind.Local).AddTicks(9422),
                            CreatorId = 1,
                            CreatorName = "管理员",
                            Description = "菜单的Uri为路由地址",
                            Icon = "MenuOutlined",
                            IsActive = true,
                            MenuType = 1,
                            Name = "菜单管理",
                            ParentId = 2,
                            Sort = 2,
                            Status = 1,
                            Uri = "/menu"
                        },
                        new
                        {
                            Id = 6,
                            Code = "yonghugl",
                            CreateTime = new DateTime(2020, 12, 1, 15, 15, 51, 797, DateTimeKind.Local).AddTicks(9427),
                            CreatorId = 1,
                            CreatorName = "管理员",
                            Description = "菜单的Uri为路由地址",
                            Icon = "UserSwitchOutlined",
                            IsActive = true,
                            MenuType = 1,
                            Name = "用户管理",
                            ParentId = 2,
                            Sort = 3,
                            Status = 1,
                            Uri = "/user"
                        },
                        new
                        {
                            Id = 7,
                            Code = "renwlb",
                            CreateTime = new DateTime(2020, 12, 1, 15, 15, 51, 797, DateTimeKind.Local).AddTicks(9431),
                            CreatorId = 1,
                            CreatorName = "管理员",
                            Description = "菜单的Uri为路由地址",
                            Icon = "OrderedListOutlined",
                            IsActive = true,
                            MenuType = 1,
                            Name = "任务列表",
                            ParentId = 3,
                            Sort = 1,
                            Status = 1,
                            Uri = "/job"
                        },
                        new
                        {
                            Id = 8,
                            Code = "youxsz",
                            CreateTime = new DateTime(2020, 12, 1, 15, 15, 51, 797, DateTimeKind.Local).AddTicks(9435),
                            CreatorId = 1,
                            CreatorName = "管理员",
                            Description = "菜单的Uri为路由地址",
                            Icon = "MailOutlined",
                            IsActive = true,
                            MenuType = 1,
                            Name = "邮箱设置",
                            ParentId = 3,
                            Sort = 2,
                            Status = 1,
                            Uri = "/mailSetting"
                        },
                        new
                        {
                            Id = 9,
                            Code = "add",
                            CreateTime = new DateTime(2020, 12, 1, 15, 15, 51, 797, DateTimeKind.Local).AddTicks(9442),
                            CreatorId = 1,
                            CreatorName = "管理员",
                            Description = "编号是前端判断权限的key",
                            IsActive = true,
                            MenuType = 2,
                            Name = "添加",
                            ParentId = 4,
                            Sort = 0,
                            Status = 1,
                            Uri = "Role:Add"
                        },
                        new
                        {
                            Id = 10,
                            Code = "query",
                            CreateTime = new DateTime(2020, 12, 1, 15, 15, 51, 797, DateTimeKind.Local).AddTicks(9445),
                            CreatorId = 1,
                            CreatorName = "管理员",
                            Description = "编号是前端判断权限的key",
                            IsActive = true,
                            MenuType = 2,
                            Name = "查询",
                            ParentId = 4,
                            Sort = 1,
                            Status = 1,
                            Uri = "Role:Query"
                        },
                        new
                        {
                            Id = 11,
                            Code = "update",
                            CreateTime = new DateTime(2020, 12, 1, 15, 15, 51, 797, DateTimeKind.Local).AddTicks(9450),
                            CreatorId = 1,
                            CreatorName = "管理员",
                            Description = "编号是前端判断权限的key",
                            IsActive = true,
                            MenuType = 2,
                            Name = "修改",
                            ParentId = 4,
                            Sort = 2,
                            Status = 1,
                            Uri = "Role:Update"
                        },
                        new
                        {
                            Id = 12,
                            Code = "delete",
                            CreateTime = new DateTime(2020, 12, 1, 15, 15, 51, 797, DateTimeKind.Local).AddTicks(9454),
                            CreatorId = 1,
                            CreatorName = "管理员",
                            Description = "编号是前端判断权限的key",
                            IsActive = true,
                            MenuType = 2,
                            Name = "删除",
                            ParentId = 4,
                            Sort = 3,
                            Status = 1,
                            Uri = "Role:Delete"
                        },
                        new
                        {
                            Id = 13,
                            Code = "auth",
                            CreateTime = new DateTime(2020, 12, 1, 15, 15, 51, 797, DateTimeKind.Local).AddTicks(9458),
                            CreatorId = 1,
                            CreatorName = "管理员",
                            Description = "编号是前端判断权限的key",
                            IsActive = true,
                            MenuType = 2,
                            Name = "权限",
                            ParentId = 4,
                            Sort = 4,
                            Status = 1,
                            Uri = "Role:UpdateRoleMenu"
                        });
                });

            modelBuilder.Entity("AdmBoots.Domain.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<string>("CreatorName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4");

                    b.Property<int?>("ModifierId")
                        .HasColumnType("int");

                    b.Property<string>("ModifierName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("ModifyTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("role");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "xtgly",
                            CreateTime = new DateTime(2020, 12, 1, 15, 15, 51, 794, DateTimeKind.Local).AddTicks(3310),
                            CreatorId = 1,
                            CreatorName = "管理员",
                            Description = "拥有最高权限",
                            Name = "系统管理员",
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            Code = "zmr",
                            CreateTime = new DateTime(2020, 12, 1, 15, 15, 51, 794, DateTimeKind.Local).AddTicks(7975),
                            CreatorId = 1,
                            CreatorName = "管理员",
                            Name = "掌门人",
                            Status = 1
                        });
                });

            modelBuilder.Entity("AdmBoots.Domain.Models.RoleMenu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("MenuId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.HasIndex("RoleId");

                    b.ToTable("role_menu");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MenuId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 2,
                            MenuId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 3,
                            MenuId = 3,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 4,
                            MenuId = 4,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 5,
                            MenuId = 5,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 6,
                            MenuId = 6,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 7,
                            MenuId = 7,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 8,
                            MenuId = 8,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 9,
                            MenuId = 9,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 10,
                            MenuId = 10,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 11,
                            MenuId = 11,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 12,
                            MenuId = 12,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 13,
                            MenuId = 13,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 14,
                            MenuId = 1,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("AdmBoots.Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4");

                    b.Property<bool>("IsMaster")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastLoginTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("user");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateTime = new DateTime(2020, 12, 1, 15, 15, 51, 787, DateTimeKind.Local).AddTicks(712),
                            IsMaster = true,
                            Name = "管理员",
                            Password = "DC483E80A7A0BD9EF71D8CF973673924",
                            Status = 1,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            CreateTime = new DateTime(2020, 12, 1, 15, 15, 51, 791, DateTimeKind.Local).AddTicks(1770),
                            IsMaster = false,
                            Name = "张无忌",
                            Password = "E10ADC3949BA59ABBE56E057F20F883E",
                            Status = 1,
                            UserName = "zhangwj"
                        },
                        new
                        {
                            Id = 3,
                            CreateTime = new DateTime(2020, 12, 1, 15, 15, 51, 791, DateTimeKind.Local).AddTicks(1816),
                            IsMaster = false,
                            Name = "周芷若",
                            Password = "E10ADC3949BA59ABBE56E057F20F883E",
                            Status = 1,
                            UserName = "zhouzr"
                        });
                });

            modelBuilder.Entity("AdmBoots.Domain.Models.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("user_role");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            RoleId = 2,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            RoleId = 2,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("AdmBoots.Domain.Models.RoleMenu", b =>
                {
                    b.HasOne("AdmBoots.Domain.Models.Menu", "Menu")
                        .WithMany("RoleMenuList")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdmBoots.Domain.Models.Role", "Role")
                        .WithMany("RoleMenuList")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Menu");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("AdmBoots.Domain.Models.UserRole", b =>
                {
                    b.HasOne("AdmBoots.Domain.Models.Role", "Role")
                        .WithMany("UserRoleList")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdmBoots.Domain.Models.User", "User")
                        .WithMany("UserRoleList")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AdmBoots.Domain.Models.Menu", b =>
                {
                    b.Navigation("RoleMenuList");
                });

            modelBuilder.Entity("AdmBoots.Domain.Models.Role", b =>
                {
                    b.Navigation("RoleMenuList");

                    b.Navigation("UserRoleList");
                });

            modelBuilder.Entity("AdmBoots.Domain.Models.User", b =>
                {
                    b.Navigation("UserRoleList");
                });
#pragma warning restore 612, 618
        }
    }
}
